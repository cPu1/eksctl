// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/schema.json (38.223kB)

package v1alpha5

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x7d\x7b\x6f\xdb\xb8\x96\xf8\xff\xfd\x14\x84\xe7\xe2\x77\x6f\x01\x3b\xbe\xbf\x05\xf6\x81\x6e\x37\x80\x9b\x74\x5a\x6f\x9b\xc4\xa8\x67\x7b\xb1\x93\x0c\x30\xb4\x74\x6c\x73\x22\x91\x1a\x92\x4a\xea\x4e\xfb\xdd\x17\xa4\x1e\xd6\x83\x94\x49\x59\xc9\xa4\x17\xfd\xab\x8d\x2c\x1e\x1e\x9e\x37\xcf\x21\x8f\xfe\x78\x86\xd0\xe8\x2f\x1c\xd6\xa3\x17\x68\xf4\xc3\x34\x84\x35\xa1\x44\x12\x46\xc5\xf4\x2c\x4a\x85\x04\x7e\xc6\xe8\x9a\x6c\x46\x63\xf5\xa2\xdc\x25\xa0\x5e\x64\xab\xdf\x20\x90\xd9\xb3\xbf\x88\x60\x0b\x31\x56\x8f\xb7\x52\x26\x2f\xa6\xd3\xdf\x04\xa3\x93\xec\xe9\x84\xf1\xcd\x34\xe4\x78\x2d\x27\x7f\xff\xf7\x69\xf6\xec\x87\x6c\x5c\x65\xaa\xd1\x0b\xa4\xf0\x40\x68\x54\xcc\x19\xb1\x34\xfc\x07\x96\xc1\xb6\xfc\x09\xa1\x51\xc2\x59\x02\x5c\x12\x10\x95\xa7\x08\x8d\x82\x6c\xd0\x7b\xb6\xd9\x10\xba\xa9\xfd\x76\x70\x71\xe5\x44\xc5\xe8\x72\xe8\xd7\xfc\x7f\x5f\xc7\xfb\xf9\x61\x0d\x9c\x43\x78\xc5\x43\xe0\xa3\x17\xe8\xda\x8a\x43\xfe\xc3\x2f\xe5\x58\x1c\x86\x7a\x66\x1c\x2d\xaa\xab\x58\xe3\x48\x40\xf9\x52\x08\x22\xe0\x24\x51\xef\x29\x8c\x03\x46\x25\x26\x54\xa0\x40\xb3\x00\x25\x98\xe3\x18\x24\x70\x81\x38\x44\x58\x42\x88\x24\x43\x15\x5a\x95\x80\x3e\x4d\x08\x95\x10\x45\xe4\xb7\xc9\x56\xc6\xd1\xe4\x58\xc0\xcf\x2a\x84\x68\xf3\xa8\x4d\x78\x2b\xab\x80\xe2\x55\x04\x3f\xed\x92\xc6\x0f\x08\x8d\x88\x84\xb8\xf9\xb0\x22\x72\x42\x72\x35\xc7\xb8\xfe\x6b\x08\x6b\x9c\x46\x52\xbd\x30\xaa\xfc\xf2\xb5\xfa\x5a\x09\x02\x73\x8e\x77\x7d\x19\x5c\xc5\x7c\x48\xee\x02\xef\xe6\x42\x2e\x58\x28\xca\x89\xec\xc9\x63\x5f\xf0\x46\x4e\x67\x16\xa0\xc2\x5e\x0e\xbf\xa7\x84\x43\x58\x27\x51\x0c\x12\x87\x58\xe2\x36\x7d\x6c\xe2\x80\x13\xf2\x11\xb8\xc8\x50\xfe\xc3\xc4\x33\x03\xdb\x6b\x4c\xaf\xfd\x00\x9f\x70\x9c\x44\x7a\x92\xeb\xba\x9c\xc0\xad\x08\x64\x74\x42\xd8\xf4\xee\xff\xe3\x28\xd9\xe2\x7f\xad\x8a\xcb\x2f\xcf\x0c\x82\x33\xc2\x77\x98\x44\x78\x45\x22\x22\x77\x3f\x33\xfa\x14\x24\x76\x5c\x35\x38\x06\x13\x89\x3c\x0c\x9e\x19\xec\x1a\xf3\x0d\x96\xb0\xe0\x6c\x4d\x22\xe7\x25\x9b\xa7\xfc\xb1\x06\xeb\xa8\xd5\x6e\x88\x74\x5b\xe6\x1b\x22\xcd\x10\x08\x8e\xbd\x08\x35\x9f\x5d\x98\x01\xdd\x12\x1a\x3e\xb0\xb4\xd6\xf5\xee\xa0\xa0\xc6\x98\xe2\x0d\x84\x97\x2c\x84\x37\x9c\xa5\xc9\x71\x5c\xbb\x68\x40\x73\xe5\x5b\x63\xd1\x35\x63\xb4\x04\x40\xd7\x0a\xe2\x46\xe3\x87\x52\x81\x37\xf0\xcb\xdf\xa6\xfa\xdf\xa9\xc6\x9f\xd0\xcd\x84\x96\x6f\x3c\x47\x98\x86\xe8\x3a\x5f\x19\xda\xff\x50\x0e\x82\x5b\x31\xc9\x7f\xd6\xe3\xc4\xf4\x79\x1d\x85\x03\xf6\x51\xa1\xf4\x12\xa3\x2d\x87\xf5\x7f\xdd\x8c\xec\x98\xdc\x8c\x4e\x9b\x88\xbf\x9c\xe2\x53\x8d\x5f\x6b\x7c\x1b\xa9\x9b\xd1\x69\x7b\x11\x0a\x80\x59\xb8\x4a\x13\xea\x23\xaa\x17\xb0\xb7\xb9\x75\x70\x74\x18\x91\x18\x54\x16\x7e\x64\x1c\x11\xba\x66\x3c\xc6\xea\x91\x26\x64\xa1\x0a\x48\x28\x41\x31\x70\xdb\x24\x22\x5e\xec\x3e\x38\xab\xa3\x2c\xb8\x30\x31\xe1\xe4\x0e\x4b\xc8\xb9\xe3\xc6\xca\x45\x7d\x8c\x11\xae\x80\x80\x83\x14\xaf\x69\xc0\x77\xc5\xc2\x1c\x40\x2f\x5b\xc3\xcc\xd0\x25\x96\x69\x4b\x4e\x3a\x05\x6f\x99\x0d\x31\x82\xbb\x4b\x02\x2f\x58\x1f\x17\x67\x7d\x43\x33\x6d\x91\xc7\xc6\xa8\xc2\xa4\x5a\x0d\xa7\xd0\xc0\xd9\xce\x47\xb3\x5e\x75\xda\xe1\x0e\xc7\xda\x19\x68\x98\xfd\x7c\xa7\x28\xb4\x39\xd9\x70\x9f\x83\x04\xad\x18\x09\xa2\x74\x26\x0f\x2a\xc7\x2a\x84\x5c\x01\xe2\x90\x44\x38\x80\x10\xdd\x13\xb9\x45\x39\xc1\xd0\x6c\x31\x77\x0e\x57\xbd\x01\x9b\x02\xd5\xd7\x34\x4c\x18\xa1\x52\xb8\x6c\x45\x72\xee\xce\x82\x00\x44\x4b\xec\x0b\x73\xb6\x62\x2c\x02\x6c\xd1\x98\x24\x5d\x45\x24\xf0\x05\xe0\x25\xda\x75\x24\x6d\x73\x0f\xc2\xda\x2d\x8b\x42\x51\xee\x07\x70\x42\x90\x00\x7e\x07\x1c\x41\x4e\x55\x84\xf5\x6c\x55\x33\xea\xcc\xde\x5e\xc0\x4d\x2c\x56\x61\x99\x03\x73\x0b\x6d\x63\xe1\xeb\x4f\x10\xa4\x0a\xdc\x07\x16\xc1\xec\xc3\xe5\x81\xd0\xad\x33\x28\x6e\x40\x5b\x00\x8f\x89\x50\x76\x46\xbc\x62\x29\x0d\x31\xdf\xf5\x81\xae\x28\x41\x02\xc5\x63\x96\xd6\x65\x17\x79\x7b\xea\x3d\x95\x96\x35\xa8\x47\x05\xdf\x39\x82\x47\x10\xb0\x02\x61\x20\xa2\x29\x7b\x70\x35\x3f\x3f\x7b\x20\xbd\x6b\x2c\xd9\x7d\x29\x87\xa5\xa6\x01\xcf\x43\xb6\x4c\xcb\xef\x90\xa3\x01\xad\x02\x8e\x22\x34\x9f\x5d\x20\x2c\x25\x27\xab\x54\x82\x40\x6c\x8d\x70\xa1\xd0\x9e\x66\xe0\x10\x34\x8b\xde\x37\x24\xda\xc1\x0a\x60\x4a\x99\xc4\xf5\x14\x63\x37\x2d\x1e\x6e\x2b\x5f\x49\x99\x9a\x00\xfc\xf1\xd5\x2c\xe7\x58\x4a\x1c\x6c\x17\x2c\x22\x41\x4b\x4f\xcc\x26\x60\x4e\x23\x42\xe1\x9c\x05\x69\x0c\xb4\x35\xa1\x89\x1d\x28\xd1\xe0\x51\x98\x8f\x51\xbe\x37\x9b\x57\xfd\x4f\x6e\x89\x40\xb9\x6c\x29\x2b\xad\x89\xef\x13\x7a\xf7\x9f\xe5\x20\x45\x66\x1f\x2e\x9f\x56\x56\x26\xc2\x2b\x88\xbe\x59\x61\xa3\x38\x86\xbe\xa9\x0d\x2b\x40\x91\xe0\x60\x58\xa8\x89\xb7\x0b\xf1\x83\xdf\x63\x27\xd4\x32\x4f\x5d\x5b\x23\x89\x37\xdf\x96\x88\x78\xb9\x4e\x2d\x44\x46\x19\x68\xeb\xc9\xd8\x6c\xab\xbb\xb4\xdd\x66\x1b\x0f\xc8\x47\xe7\xf6\x48\x33\x64\x48\x77\x49\x11\xc1\x71\x6e\xcd\x72\x63\x86\x8a\xfd\xa7\x4e\x3d\x64\xbb\x9c\x94\xf7\x89\xa2\x7d\xa1\x3b\xb9\xd3\x65\x53\xe6\xad\x4e\x95\x7b\x86\x81\x5e\xc2\x53\x00\x1f\x90\x19\x19\xbb\x55\x84\xd1\xa2\x9a\x27\xe1\xbb\x20\x99\x88\xac\xf3\x72\x07\xab\x26\x4d\x7d\xe1\xb0\xa9\xe4\x68\x0e\xd7\x50\x06\x37\xda\x39\x02\x43\x82\xfc\xe6\x2c\x5e\x35\x29\x74\x5c\x81\x6a\x20\x2b\x9a\x33\xc5\x80\xd7\x83\xd8\xb1\xb2\x42\xbc\x01\x0a\x1c\x47\xe5\xd6\xbd\xcf\xe6\xdf\x09\x98\x49\x81\x2e\x67\x3f\xb9\x58\x24\xb5\x7f\xba\xc7\xee\xdb\x48\x2f\x46\x14\xc0\x07\xb4\x48\x97\xb3\x9f\x50\x0e\xb6\x6e\xaa\x11\x4b\xea\x0e\xd0\xcd\x2e\x1d\x86\x67\x22\xae\xbb\xc5\xc7\x7c\x58\x6b\x10\xa8\x49\xd6\x24\xc0\x12\x66\xa9\xdc\x32\x4e\xe4\xee\xdc\x50\xf4\x70\x8b\xe4\x8f\x09\xd7\x8b\xec\xd3\xd0\xe1\x63\x70\x7b\x39\x88\x55\xf6\x92\xd4\x72\x31\x2e\xa4\x1e\xd7\xd9\x6b\x44\x7f\x30\x91\x47\x1c\x70\x38\x61\x34\xda\x0d\x92\x41\x70\x00\x67\x14\xf8\x74\x45\xc1\x2b\x37\xdc\xcf\x65\x59\x6a\x68\x20\xef\x19\xbf\x7d\x30\x37\x95\x25\x84\x9f\x3c\xc6\x5e\x12\x5d\xb0\xa1\xbd\xcc\x01\xad\x71\x3e\x89\x0e\x9c\x33\xe8\x48\xe4\x92\xe2\x67\x86\x3b\x00\x99\xc4\xf1\xe3\xe2\xcc\xc9\xf8\xa6\x92\xcd\xa2\x88\x29\x15\x9e\x2f\xee\xfe\xad\x57\xa5\x22\x20\xa1\x63\x1d\x72\x43\xe4\x36\x5d\x9d\x04\x2c\xfe\x72\x0f\xf8\x0e\x94\x04\x88\x2f\xd9\xf1\x99\x2f\xc9\xed\xe6\x4b\x2a\x49\x24\xbe\x90\x84\x82\x3c\x99\x2f\x2e\xc1\x92\xa5\x09\xec\x15\x99\x8e\xd9\x5b\x75\x1c\xb3\xd5\xfe\x24\x39\x3e\x9b\x9f\x7f\x38\x2e\x57\x7e\xcc\x52\xfb\x97\xbf\xd7\x8c\xa3\xbd\xb0\x22\xb5\x0c\x84\x85\x60\x01\xc9\x36\xbf\x63\x04\x27\x9b\x13\x24\x19\x4a\x05\x64\x65\x2f\x01\x09\xe6\x4a\xb2\xf4\xcb\x0a\x40\x21\x6a\xb9\x7c\x21\x05\x93\xee\x10\x0e\x27\x5b\xd6\x16\x5f\x17\x11\x7e\x44\xb4\x8c\x3c\x25\xbd\xcf\xd4\x18\xc1\x51\xec\x78\x5e\xa8\x12\x69\x76\x98\xd5\xac\xce\xe6\x23\x72\x8f\x93\x6e\x14\x10\xa4\xca\xa5\x67\x87\x33\x06\x0d\x62\xb6\x98\x67\xa5\xec\x65\xff\x39\x5a\x12\x96\x70\x98\x68\xea\x43\x88\xb2\x19\xf4\xa9\x18\xb4\x7c\xe3\x2d\xac\xae\xa0\x0e\xaf\xb4\x15\x16\x1c\x16\x97\xa5\x49\xc3\x1a\x48\x16\x4a\x80\x39\x20\x20\x72\x0b\xbc\xf0\x0a\x15\x4d\x51\x2b\x69\x2b\xd4\xfe\x90\xc9\x18\xc9\x2d\x08\xd0\x40\x6e\x61\x07\x21\x5a\xed\xd0\xec\x67\x3d\x2e\x60\xf4\x0e\x28\x01\x5a\x4b\xad\x1d\xa6\xde\xa3\x22\xd6\xd3\xf3\x93\xda\x81\x0e\xed\xbe\xac\x62\x6f\xe0\xa5\xd9\x59\x38\x88\xf7\xb8\xc3\xf1\x36\xcc\x4b\x97\xb3\xeb\x34\x20\x03\xc6\x2e\x9b\x88\xad\x70\x94\x5b\x56\x1d\x78\xe0\x28\x42\xc1\x96\x44\x45\x08\x32\xad\xdb\x64\xcf\x90\xc6\x1f\x7e\x2d\xd2\x69\x1c\x00\x75\x4b\x85\xb5\xc8\x33\x5c\xe2\xab\xb6\x42\xb6\x56\x22\x8c\x72\x1c\x51\x92\x21\x79\xe2\xa5\x4a\x4e\x30\x0e\xd7\x33\xbc\x4f\x29\x74\xad\x6b\x3e\xbb\x40\x9c\x45\xf0\x57\x81\x66\x1f\x2e\x0b\x8f\x2d\x19\xe2\x29\x45\x09\x0b\x05\x62\x54\xb2\x02\x67\xbf\xf5\x1e\x05\xfb\xb0\x25\x86\x08\x02\xc9\xf8\x90\xa7\x8e\x97\x39\xcc\x21\x42\xb7\xcc\xdd\x68\x8e\xf3\x34\x02\xa1\x16\x9e\xe1\x8c\x54\xec\x18\x31\xac\x8f\xd4\x8b\x60\x0b\x61\x1a\xc1\x11\x74\x3e\x6e\x26\x1f\x37\xf7\x58\xe1\x4b\x17\x5d\xef\xb7\x24\xd8\x96\x4a\x24\xb6\x2c\x8d\xc2\x42\xb0\x42\x86\x68\xb6\x0f\x45\xfa\x24\x98\xae\x1c\xe7\x6a\x97\x51\x04\xc2\x92\x26\x27\x68\xbe\x46\x94\x51\xad\x89\x77\x24\x84\x70\xac\x0d\x56\xe1\xf1\x94\x73\x52\x03\x8b\xfc\xe3\x3d\x89\x22\xb4\x02\x35\x57\xe8\xc7\xa0\x27\x82\xb2\x91\xd3\xdf\x5c\xb2\xdd\x2b\x32\x68\x26\xc6\x4d\xc6\xd3\x68\x53\xba\xc3\x84\xe1\x52\xe7\x99\xee\x8a\x9c\xdd\x52\x12\xba\x11\x9a\x5d\x35\x8d\x2d\xd5\xd8\x6c\x24\xdc\x0c\x44\xcf\x49\x3a\x7c\x74\x69\x2e\x9d\x7c\x75\x56\xd6\x75\x76\xd8\x4f\xfa\x70\x44\x8d\xbc\xef\xd2\x15\x70\x0a\x12\x04\xd2\x48\xa3\x52\x8c\x2a\x3e\xaf\x61\x90\xfd\x0c\xc8\x00\x33\x38\x1e\xe8\xe8\x71\xfe\xc2\x86\x69\x09\x0e\xad\x39\x8b\x51\x66\x04\x07\xa4\x44\x3f\xf8\x03\x55\xdb\x6c\x67\x14\x06\x35\x0a\x47\xc4\x0d\xae\x26\xa1\x6f\xc0\x50\x18\x84\x37\xc4\xe9\x6c\xdd\x8a\x31\x29\x24\xc7\x49\x3b\xba\x47\xf6\xe0\xac\x75\x17\xac\x2a\xad\x6a\x22\x5c\x37\x3e\x1d\xa0\xae\x8a\xb7\x8d\xb0\x38\x24\xcc\x0d\xce\x07\xf5\x66\x4f\xb9\xd1\xb3\x98\x56\x30\xee\x20\xd4\x20\x02\x95\xdf\x47\xd2\xdb\x31\x53\xc9\xaf\x7a\xc7\x53\x5f\x5d\x25\x74\x83\xde\x10\x79\x95\xa8\x18\x7d\x5f\x29\xd1\x9b\xba\x88\xd0\x5b\xf5\x3b\xc9\x0e\xe5\xa9\xf7\x90\x5a\x9a\x20\x92\xf1\x9d\xbb\x08\x3e\x2a\x52\x35\xa1\x6d\x1c\x7a\xac\xc8\xaf\xcd\xbd\xec\x19\x6c\xf1\x0b\xb6\xa3\x3d\x3b\x84\xf9\x8a\x48\x8e\xf9\x0e\xfd\xf7\xf2\xea\x72\xfa\xbf\xb3\x8b\xf7\xe5\xa9\x46\x31\x46\x22\x0d\xb6\x08\x0b\xa4\x33\x0f\x86\xdb\xb7\x8c\xeb\xd3\xaf\xfa\x38\x24\x01\xdf\x2a\xc3\x43\x22\x60\xf0\x28\x05\x81\x5b\xb7\x02\x07\xde\xcc\xe3\x98\xfc\x88\x63\x12\x79\x9e\xe4\xab\x5f\xe9\x4b\x20\x20\xeb\x1d\xba\x0e\x52\x21\x59\x8c\x66\x17\xf3\xfd\x0d\xb2\xec\xd9\x04\xc7\x64\x22\xd2\x24\x61\x5c\x4e\x9f\x8f\xd1\x8d\x4e\xf3\x4c\x84\x88\x6f\x46\xc5\x5f\xea\x7f\x8c\xa3\x1b\x7d\x50\x8c\x04\x37\x23\xbf\x7b\x85\x39\x12\xad\xfb\x64\x06\x04\x6e\x46\xa7\x15\x54\x5f\x4e\xf1\xe9\x18\xfd\xbf\xdf\x53\x26\xff\xb3\xc0\x2a\xfb\xab\xfa\xb4\x78\xc2\x78\xfe\x30\xc3\x32\xfb\xbf\xe7\x86\xfb\xc9\xdc\x70\xee\xe2\xea\x7b\x12\x13\x99\x5d\x0a\xcc\xdc\x9a\x26\x30\x09\xd0\xec\xe7\x3d\x77\x15\x65\x44\x80\x95\x41\x99\xfe\xf0\x99\x51\x98\xe0\x7b\xcc\x61\x92\xd1\x31\xfb\xc1\xef\xc2\x60\x36\x6d\x8b\x8b\x2e\x13\xe5\xd7\x04\x5b\xd8\xda\x6f\x0c\x86\x20\x94\x02\x9d\xe1\x04\x07\x44\x5a\x75\x40\x21\xbc\xb1\xdd\x0e\x74\xbe\xe0\x5c\xea\xb0\xf5\x8a\x33\xa1\x42\x62\x1a\xe8\x6e\x07\x83\x56\x15\x9e\xf4\x0e\xe0\x60\x34\x1d\xe3\x4f\x4b\xf2\xd9\x4a\x91\x4e\xee\xc4\x84\xf6\x1e\x3b\xf8\x09\xbf\x3c\x67\x9b\x17\xf8\x0d\x3d\x53\x9a\x45\xe5\x2e\xfd\x7c\xad\x1b\x63\xa0\xeb\x22\x11\x4c\x4b\xa8\xa5\x76\xde\x25\xc1\x64\xff\x78\xfa\x43\x2a\x60\x92\xbf\x3e\xc9\xf7\xe2\x93\x35\xe3\x13\x2d\xa2\x38\xda\xdf\xb8\x7d\xae\xf3\x1f\xe5\x9f\x5e\x0a\x9c\xe3\xd5\xd2\xe0\xde\xc8\xdc\x8c\x4e\xdb\x6b\xd4\x77\xc1\x3b\x90\xac\xf0\x42\xc7\x73\x96\xe4\x9c\x70\xec\xe2\x50\xea\xee\x72\xf9\xf6\x9f\x24\xfb\x53\xc1\xfd\x8e\x45\x69\x0c\x2e\x7a\xd2\x25\x90\x1b\xb2\xc1\xab\x9d\x04\xbf\x02\xb8\x65\x54\x05\xeb\xff\xf8\xfb\x50\x39\xab\x7d\xb0\x63\x33\xba\x9d\x4e\xba\xc3\x71\x18\x2c\x8e\xc1\x80\x99\x49\xde\x90\xc7\xb6\xd9\xee\xb4\x20\x4d\x11\x6c\x78\xa6\x56\x20\x68\xd9\xbd\x62\x8a\x5e\xbf\x5b\x4e\x5a\x3d\x13\xd0\x4f\x57\xe7\x57\xe8\x23\x8e\x48\x58\x96\x27\x69\x8c\x93\x04\x42\xb4\x26\x90\x45\xc6\x21\x92\x5b\xce\xee\x15\x10\xe0\x9c\xb9\x9f\x2a\x7b\x98\xd9\xeb\x01\x34\x48\x4e\x02\x71\xc6\x22\xb5\x2b\xaf\x1f\x28\xb6\x44\xd0\x1b\x8e\x69\x1a\x61\xae\x18\xeb\x1c\x48\x57\x07\x0d\xe9\x33\xe2\x0c\xff\x3f\xff\xf8\x83\x97\xe6\x55\xa9\x61\x58\xcc\x20\x5b\x71\x9d\x76\x5d\xed\xb2\x5c\x6c\x16\x01\x96\xb7\xd8\x75\x3f\x0b\x7d\x85\x7f\xdf\x7a\x22\x64\x81\xf8\xe5\x6f\x5b\x29\x13\xf1\x62\x3a\x55\x7f\x9d\xe0\x7b\x71\x82\x63\xfc\x99\xd1\x93\x80\xc5\xd3\xd9\x3f\x96\xba\x4f\xcf\x8f\xc5\x98\xa9\xda\x36\x0b\x39\xfd\x1f\x01\xfc\x4d\x4a\x42\x98\xe2\x7b\x31\xd9\x8b\xc0\x04\x8b\x49\xbe\xa6\xa0\x14\xb0\x13\x25\xe9\xcf\x9d\x75\xe0\xd0\x32\xf6\x8e\xf4\x91\x50\x57\xbb\xa3\x36\xe5\xf6\x41\x74\xa1\x59\xc5\x39\x45\x87\xa4\xd5\xe3\x9f\x83\x1b\xe2\x5c\x93\x97\xc4\x1b\x4e\x4e\x0c\x22\xe5\x59\xf6\x61\x7e\xae\x0d\xdd\xd9\xfc\xfc\x83\x67\xde\xa2\x3a\xb2\xce\xbe\x07\x4c\x29\x0c\x6a\x01\xbf\xa7\x28\xfe\x8c\x14\x85\xd8\x74\x79\x4e\xd4\xe1\x83\x2c\xed\xad\x5a\xd0\xbc\x3d\xd0\xf7\x0c\x8a\x93\x98\x3d\x6a\x06\x65\xc5\xa4\x8c\x80\xb3\xe0\x16\x1c\x4f\x7e\x96\x76\xe7\x55\x75\x68\xa7\xf2\x2e\xdf\x96\x79\x6d\x10\x48\x88\x6d\xd1\xb5\x24\xab\xd2\x13\xd1\x73\xab\xea\x05\xd8\xb8\xfc\x20\xc2\x42\x90\xe0\x3d\xc3\xe1\x2b\x1c\xa9\x6d\x04\xbf\xc4\xf1\xd3\x14\xc7\x59\x7e\xac\x18\x90\x2e\x4b\xad\x72\x7c\x45\x76\xd6\x50\x89\x41\x19\x7f\xf8\x93\xd2\x1b\xb8\x85\x9c\xba\x0e\x71\x7e\xb9\x3c\xc2\xd6\x5f\x9f\x65\x86\x13\x87\x21\x07\x21\xac\xd9\x90\xdc\xea\xe6\x73\x4e\x42\x2a\x26\xf9\x90\xe7\x59\x49\x5f\x09\xc1\xf9\xe5\x12\x45\x8c\xdd\xd6\xbb\x4a\x1d\xa6\xc7\xc1\xf4\x87\x7d\xf6\x9b\xd1\x69\x7d\x05\x3a\xd7\x71\x18\xa3\x83\x36\x7d\x88\x6c\x27\xac\xc4\x55\x22\x49\x4c\x3e\x83\x35\xc2\x72\xc9\x5e\x65\x6d\x5d\x05\xba\x7e\xfd\x6a\xa9\xcb\x54\x31\xf9\xac\x83\xcd\x83\x11\xfa\xeb\xb3\x7f\x69\xc7\xb6\xb0\x12\x13\x56\xe0\xd5\x08\xc0\x5d\xd8\x55\xa0\xe3\x1c\x6c\x3b\x62\x71\x33\x3a\x6d\x2e\xd0\x6e\x4b\x1f\x20\x93\x3c\xcc\x75\x38\x03\xe0\x05\x87\x35\xf9\xf4\x20\xa0\x07\xcf\x7e\x17\x80\xc5\x39\x11\xd9\xb5\x35\xe7\x1e\x7e\x7b\x4a\x1b\x61\x18\xa7\xbb\x4d\x57\x10\x81\x7c\xad\x0f\x40\x37\x5b\xf8\x76\xcc\xe5\xd1\x40\x26\x37\x71\xe4\x33\xa0\x5f\xf3\xe9\x7e\xcd\x3d\x59\x23\xaa\x25\x9f\x09\xdd\x4c\xe4\x16\x26\xf9\x7b\x9e\xed\x3a\x2d\xb1\x6a\x1b\x6c\x69\xb5\x14\x52\x2f\x03\x16\xc2\x69\xfe\xd3\xcb\xa9\xfe\x2b\xc7\xcf\x2e\xfe\xdf\x7c\x91\x62\xc1\x42\xb1\x00\xae\x64\xa6\x5f\xad\xe2\x9f\xa5\xce\xc1\xee\x80\x73\x12\xc2\xab\xe2\x08\xc6\x19\x8b\x63\xec\xdb\xbe\xb7\x26\x87\x57\x39\x48\xf4\x6b\x96\x0b\xf8\xf5\xaf\x02\x95\x27\x3c\x12\x15\x56\x64\xaf\x7b\x09\x77\x09\x34\x93\xd7\x0c\x72\x2e\xae\x36\xf8\xc6\x05\x27\xbc\xb5\xd6\x27\x19\x02\x82\x3e\xb1\x09\x21\x5a\xc1\x9a\x71\x68\xac\xb0\xb4\x93\x59\x63\x28\x68\x5d\x12\x76\xa1\x69\xcf\x29\x2c\x64\xfd\x5e\x2f\x7b\x5a\xf5\xb2\xea\xa5\x1d\xc7\xab\x5b\xfb\xd2\xd9\x1b\xcb\x1d\xc4\xef\x55\xb8\x1c\x77\xd3\x85\xdd\x6f\x07\x7b\xbe\x01\xa9\xb9\xf3\x67\x76\x87\x73\xdb\x00\x67\xc8\x66\x3b\xd1\x81\xb7\xbf\x4e\xa0\x8d\x14\xcc\x4a\x82\x79\x6b\xe1\xc3\xbb\xab\x0e\x18\xf3\xab\x85\x75\x03\xdd\x19\x09\x64\xc3\xdf\xc5\xe2\x1d\xec\xe6\xe7\xce\x8d\x5d\x5a\x10\x1c\xb6\x1d\x1d\xa3\xbf\x89\x42\x74\x0b\x6b\xff\x6d\x4b\x6d\xfa\x8f\xe5\xd2\x51\x3f\xfc\x0f\x03\xf8\x5e\x53\x1f\xa6\xa6\x5e\x5f\xbd\x69\xdd\xf5\x5d\xa2\x7d\xfb\x6c\xdb\xb1\xdb\x5d\xee\xa1\x14\xbd\x2d\x55\x63\x16\x57\xb3\xe2\x76\xd8\x24\xbb\xad\x30\x1b\x21\xfb\x06\xa9\xed\xf8\x5c\xd2\xaa\x1d\x0e\xc7\x96\x94\x3e\x14\xa6\xbb\xec\x5b\xcc\x29\xca\xee\x3d\x7f\xfe\xe3\x20\xcd\xc1\x6b\x87\xba\x2b\xbd\x77\xe4\x16\x4b\x7d\x15\xbc\x4c\xd6\xeb\x23\xdb\xed\x18\xcf\xb1\x4f\x78\xef\x79\xf4\x34\xad\xca\xe2\x2b\x73\x71\xe0\xc0\x57\xaa\x66\x61\x4c\xe8\x59\xf1\x19\xa5\x5e\x6e\xb0\xb8\x9a\x35\x78\xe2\xa5\x6c\xa9\x86\xe9\x0e\x5d\x57\xe5\xac\xbc\x0e\xb6\x4f\x60\xee\x6b\xd9\xd3\xea\x9b\x13\x26\x6a\x7f\x4f\x7f\xa8\x4c\x32\x61\xeb\x49\x01\xc9\x2f\x53\x53\x43\xad\x9d\xc7\x3c\x16\x99\x9b\xd1\xa9\x71\xb9\x8d\x7c\x8e\x97\x2f\x31\xf2\xdb\xc4\xc6\x01\x75\x49\x6f\x3a\x6b\x72\xae\x76\x45\x55\x49\x45\x2b\x2c\x20\x44\xfb\xcf\x49\xb8\x5f\xc4\x38\x62\x0a\xb3\x06\x39\xb6\xdd\x7f\xd2\xbd\x99\xf7\x3e\x4f\xdf\xc3\xf1\xbe\x65\xef\x98\xdd\xed\x75\x83\xdf\x03\xf6\x83\xa5\xd2\xfb\x75\xe7\xf7\x9b\x4b\x6d\x44\x66\x61\xc8\xe8\xa2\xb8\x7c\xe2\x5d\x68\xa8\x0f\xef\xa9\xf1\x5d\x6d\x85\x0d\x72\xd2\xc1\xe6\x2e\x2e\x79\x10\xb9\x93\x46\x03\x9a\x1d\x5b\xef\xfd\xfd\x29\x1c\x3f\x1b\x73\x18\x9e\xd5\xa0\xd8\xe4\xc0\x6e\x5d\xa2\xd5\x9c\x6e\x78\xdf\xcf\xb5\xe0\x24\xb9\x80\x76\x8a\xc7\x67\xec\x82\xc3\x1d\x81\xfb\x7e\x20\x52\xc9\x96\x01\x8e\x7a\x86\x12\x01\x70\x99\x5d\xc2\xea\x39\xde\xfa\xbd\x40\xa7\xe1\xb0\xea\x47\x74\x58\xf7\x1c\xf7\x49\x02\xa7\x38\xea\x28\xc1\x77\x8e\x5f\x0b\x6b\x51\xb0\x73\x1c\x89\xf1\x06\x5e\xa5\x24\x0a\x7b\xd2\xf9\xd3\x07\x7b\x27\xda\x23\x3f\x4a\x52\xc3\xcd\x2c\x59\x16\x0a\x5a\xe4\xc8\xa0\x1c\x76\x99\x6f\x08\x43\x83\xd6\x0d\x96\x8f\x8d\x5a\xdb\x24\x93\x59\x3c\x1f\xc2\xda\x29\x53\xd3\xfb\xc6\xa5\x19\x88\xc5\xae\x1d\xa8\xf1\x5a\x4e\x36\x56\x13\x15\x06\x7b\x6f\xb3\x88\xf5\x61\x4f\x29\xd8\x52\xbb\x6c\x4e\xec\x8d\x07\x68\x1a\xaf\x6c\xd9\x3f\x46\xcf\x41\x6d\x77\x5f\x61\x01\x47\x1d\x12\x29\x00\x2d\x80\x07\x40\x25\xde\xc0\x6c\xc5\xee\xe0\x68\xb8\x22\x61\x32\x6f\x0d\x46\x18\x5d\x4a\x8e\x25\x6c\xfa\x7d\xfb\x29\x61\xb2\x10\x99\x05\x63\xed\xb2\xb3\x1d\x1f\x3f\xd3\x51\x13\x14\x13\x9f\x0e\xd1\xdf\x93\xac\x9d\x6b\x3c\x4c\xca\x01\x6d\x80\x79\x17\x74\xad\x26\xde\x97\x01\xcb\xd2\x9b\x7a\x3c\x29\x1f\x4f\xdd\x8f\xcf\x77\x4d\xd6\xaa\xa9\x35\x66\xb9\x19\x9d\xd6\xd1\x31\x1c\x72\xaf\x56\xaf\x9c\x77\x62\xf3\xf3\x27\x59\x00\xc9\x90\x03\x51\xed\x38\x5a\xe4\x17\x51\xde\x44\x20\xaf\xcb\xf6\xab\x65\xf6\x9a\xc0\xba\x61\x79\xcf\x02\x1c\x1d\x53\xf2\xcd\x3f\x73\x84\x1b\x38\x20\x25\xf6\x51\xf9\xf5\xa3\x63\x96\xda\x13\x76\x85\xaf\x92\xa7\x96\x62\xab\x22\xc1\x52\xf7\x4b\x1c\x80\x06\x59\xc3\xa2\x1a\xa6\x79\xf7\x4e\x1c\x33\xba\xd1\xce\x76\xdf\x65\x12\x11\xda\xfb\x00\xc0\xf0\x13\xda\xa9\xe5\x65\x8b\xf7\xaa\x69\x26\xb2\x51\xfa\x06\x31\x88\x01\xa3\x92\xb3\x48\xb4\x74\xa1\xe3\xfc\xb2\x4b\xba\xcf\x15\xa6\xc5\xa2\x2d\xdf\xba\xed\xfe\x22\xd6\x6f\xe7\x95\x75\xaa\x7c\x07\xbd\x3c\x74\x39\xb8\x6f\x2d\xb1\x04\xb0\xc0\xd2\xba\xf7\xea\x8c\x11\x58\xca\x83\x7a\x9f\xd2\xf9\x9f\x77\xac\xa7\xaf\xd0\x6b\xee\x59\xc9\x62\xe4\x96\x95\x0b\x87\x89\x33\xf0\x1e\x42\x1b\x91\xfd\xa9\xfc\xba\x87\xd7\x25\x88\x63\xf2\x27\x3e\xd0\x6b\x2a\x74\xd5\x6e\x98\x64\xbf\xfa\xc6\xe2\x98\xc8\x62\xc4\x05\xa6\x64\x0d\xa2\x7d\xcc\xc3\x49\xa1\x74\xed\x72\xd0\xbc\xe0\xc3\x7c\x28\x8e\x03\x0e\xaf\xa8\xfd\xc2\x96\xc5\x6f\xb9\x9c\x40\x52\x96\xf9\x2d\x44\xad\x83\xd2\x03\x6d\xf5\x6d\xdc\x6a\x31\xc1\x48\x43\x13\x9e\x26\xb2\x0c\xa2\x25\x3e\x4d\x9f\x94\xa4\x17\x3d\xb2\xca\x76\x85\xb7\x00\x49\xad\xc7\x65\x76\x95\x1a\x1a\x1d\x9f\x94\x6b\x16\x3b\x1a\x3c\x4c\x3b\xaa\x61\x30\xab\x69\xe7\xc2\xf6\x19\x78\xbb\x8b\x2b\xc9\x5f\xb4\x92\xce\x3f\xd2\xf6\x04\xac\x7d\x35\xc1\xa3\xcb\x65\xbe\xd1\xa0\x55\xab\xbc\x14\xa3\x98\x7b\xec\x44\xb5\x41\x04\xbc\xda\x6b\x33\x6f\xa6\xa5\xbf\x96\x50\xf6\x4a\xf7\xfd\x86\x8d\x33\xc0\x86\x38\xb5\xba\x68\xdb\xe4\x88\xa5\x32\x49\xa5\x43\xbc\xe1\x6b\x4e\xef\xc8\x30\x9f\x42\x6b\x39\xf0\x47\xbe\x24\x9d\x4f\x6a\x5a\xdb\xd8\x48\xc6\xa1\x2d\x65\x08\x12\x93\x28\xef\x7a\xf7\x7b\x4a\x82\x5b\x21\x31\x97\x45\x07\xf1\xb2\x41\x1e\xa8\x37\x9a\x16\x08\x87\xa5\xc9\x1a\xa0\x53\xdf\x43\xa1\x52\x13\xde\x0f\xf5\x76\x8c\xf6\xae\x92\x1c\x53\x7b\x85\xa2\x97\x80\x41\x8c\xc9\xb0\xc1\xca\x3a\x4a\x3f\x0d\xae\x5c\x09\x96\xdb\xa7\x65\xe6\x73\x6b\xb4\x5c\xbe\x75\xdb\xbc\xf8\xad\x37\xe5\xc3\x32\x25\x15\xf6\x82\xcd\x03\x59\x11\xb5\x84\x71\x4b\x76\x5b\x3c\x35\x49\x4e\x13\xf1\x96\xbc\x76\xf2\xe1\xd1\xe3\xb6\x66\xf7\xcd\xfd\x2d\xd0\xac\x7b\xe7\xc3\xc4\x64\x87\x67\xad\xd9\x98\x25\x04\x1c\xa4\xc8\x0f\x09\x3a\x95\x5d\x6e\x61\x67\xfc\xda\xac\xcd\x3c\xe5\xef\xbb\x6e\xe2\xbd\xa4\xc9\x86\xcb\x30\x21\x4b\x35\x1d\xfd\xee\x62\x89\xa0\xa4\x52\xd1\x78\xfe\x98\xf8\xc5\x05\x7a\x8d\x57\x3d\xda\xab\x54\x98\x69\xd1\xeb\x56\xca\x91\xa2\xf9\xa2\xb8\xbc\xac\x82\x74\xfd\xa1\xaa\xe2\x33\xd3\xce\xcb\x3d\x00\xe6\x59\xc1\xea\xaf\xcf\xbe\x3e\xfb\xbf\x00\x00\x00\xff\xff\x2e\xb2\x54\xfc\x4f\x95\x00\x00")

func schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaJson,
		"schema.json",
	)
}

func schemaJson() (*asset, error) {
	bytes, err := schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x78, 0x1b, 0xf8, 0x8c, 0x6e, 0x61, 0x79, 0x8, 0x7f, 0xa3, 0x99, 0x3f, 0x89, 0x8a, 0x1, 0xbd, 0xd5, 0xc1, 0xc3, 0x5b, 0x6a, 0x94, 0xfb, 0x79, 0xe2, 0x14, 0xe3, 0x3e, 0x4, 0xa, 0x2d, 0x3b}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.json": schemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.json": &bintree{schemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
