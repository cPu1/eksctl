// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	v1alpha5 "github.com/weaveworks/eksctl/pkg/apis/eksctl.io/v1alpha5"
)

// SubnetsLoader is an autogenerated mock type for the SubnetsLoader type
type SubnetsLoader struct {
	mock.Mock
}

type SubnetsLoader_Expecter struct {
	mock *mock.Mock
}

func (_m *SubnetsLoader) EXPECT() *SubnetsLoader_Expecter {
	return &SubnetsLoader_Expecter{mock: &_m.Mock}
}

// LoadSubnets provides a mock function with given fields: ctx, clusterConfig
func (_m *SubnetsLoader) LoadSubnets(ctx context.Context, clusterConfig *v1alpha5.ClusterConfig) ([]string, bool, error) {
	ret := _m.Called(ctx, clusterConfig)

	if len(ret) == 0 {
		panic("no return value specified for LoadSubnets")
	}

	var r0 []string
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha5.ClusterConfig) ([]string, bool, error)); ok {
		return rf(ctx, clusterConfig)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha5.ClusterConfig) []string); ok {
		r0 = rf(ctx, clusterConfig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1alpha5.ClusterConfig) bool); ok {
		r1 = rf(ctx, clusterConfig)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *v1alpha5.ClusterConfig) error); ok {
		r2 = rf(ctx, clusterConfig)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SubnetsLoader_LoadSubnets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadSubnets'
type SubnetsLoader_LoadSubnets_Call struct {
	*mock.Call
}

// LoadSubnets is a helper method to define mock.On call
//   - ctx context.Context
//   - clusterConfig *v1alpha5.ClusterConfig
func (_e *SubnetsLoader_Expecter) LoadSubnets(ctx interface{}, clusterConfig interface{}) *SubnetsLoader_LoadSubnets_Call {
	return &SubnetsLoader_LoadSubnets_Call{Call: _e.mock.On("LoadSubnets", ctx, clusterConfig)}
}

func (_c *SubnetsLoader_LoadSubnets_Call) Run(run func(ctx context.Context, clusterConfig *v1alpha5.ClusterConfig)) *SubnetsLoader_LoadSubnets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1alpha5.ClusterConfig))
	})
	return _c
}

func (_c *SubnetsLoader_LoadSubnets_Call) Return(_a0 []string, _a1 bool, _a2 error) *SubnetsLoader_LoadSubnets_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *SubnetsLoader_LoadSubnets_Call) RunAndReturn(run func(context.Context, *v1alpha5.ClusterConfig) ([]string, bool, error)) *SubnetsLoader_LoadSubnets_Call {
	_c.Call.Return(run)
	return _c
}

// NewSubnetsLoader creates a new instance of SubnetsLoader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSubnetsLoader(t interface {
	mock.TestingT
	Cleanup(func())
}) *SubnetsLoader {
	mock := &SubnetsLoader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
