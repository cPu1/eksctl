// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	types "github.com/aws/aws-sdk-go-v2/service/cloudformation/types"
	mock "github.com/stretchr/testify/mock"

	v1alpha5 "github.com/weaveworks/eksctl/pkg/apis/eksctl.io/v1alpha5"
)

// VPCImporter is an autogenerated mock type for the VPCImporter type
type VPCImporter struct {
	mock.Mock
}

type VPCImporter_Expecter struct {
	mock *mock.Mock
}

func (_m *VPCImporter) EXPECT() *VPCImporter_Expecter {
	return &VPCImporter_Expecter{mock: &_m.Mock}
}

// LoadClusterVPC provides a mock function with given fields: ctx, spec, stack, ignoreDrift
func (_m *VPCImporter) LoadClusterVPC(ctx context.Context, spec *v1alpha5.ClusterConfig, stack *types.Stack, ignoreDrift bool) error {
	ret := _m.Called(ctx, spec, stack, ignoreDrift)

	if len(ret) == 0 {
		panic("no return value specified for LoadClusterVPC")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha5.ClusterConfig, *types.Stack, bool) error); ok {
		r0 = rf(ctx, spec, stack, ignoreDrift)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VPCImporter_LoadClusterVPC_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadClusterVPC'
type VPCImporter_LoadClusterVPC_Call struct {
	*mock.Call
}

// LoadClusterVPC is a helper method to define mock.On call
//   - ctx context.Context
//   - spec *v1alpha5.ClusterConfig
//   - stack *types.Stack
//   - ignoreDrift bool
func (_e *VPCImporter_Expecter) LoadClusterVPC(ctx interface{}, spec interface{}, stack interface{}, ignoreDrift interface{}) *VPCImporter_LoadClusterVPC_Call {
	return &VPCImporter_LoadClusterVPC_Call{Call: _e.mock.On("LoadClusterVPC", ctx, spec, stack, ignoreDrift)}
}

func (_c *VPCImporter_LoadClusterVPC_Call) Run(run func(ctx context.Context, spec *v1alpha5.ClusterConfig, stack *types.Stack, ignoreDrift bool)) *VPCImporter_LoadClusterVPC_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1alpha5.ClusterConfig), args[2].(*types.Stack), args[3].(bool))
	})
	return _c
}

func (_c *VPCImporter_LoadClusterVPC_Call) Return(_a0 error) *VPCImporter_LoadClusterVPC_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *VPCImporter_LoadClusterVPC_Call) RunAndReturn(run func(context.Context, *v1alpha5.ClusterConfig, *types.Stack, bool) error) *VPCImporter_LoadClusterVPC_Call {
	_c.Call.Return(run)
	return _c
}

// NewVPCImporter creates a new instance of VPCImporter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVPCImporter(t interface {
	mock.TestingT
	Cleanup(func())
}) *VPCImporter {
	mock := &VPCImporter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
